
struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
	float3 worldPos : POSITION;
	float3 normal : NORMAL;
};

float3 pointLightPosition; // in world space
float3 pointLightIntensity;
float3 pointLightAttenuation;

struct lightSampleValues
{
	float3 dir;
	float3 L;
};

lightSampleValues computePointLightValues(float3 surfacePosition)
{
    lightSampleValues values;

    float3 lightVec = pointLightPosition - surfacePosition;
	float dist = length(lightVec);

    values.dir = normalize(lightVec);

	// Dot computes the 3-term attenuation in one operation
	// k_c * 1.0 + k_l * dist + k_q * dist * dist

	float distAtten = dot(pointLightAttenuation,
		float3(1.0, dist, dist*dist));

    values.L = pointLightIntensity / distAtten;

    return values;
}

float4 ps_main( VS_OUTPUT input ) : SV_TARGET
{
	lightSampleValues lightValues = computePointLightValues(input.worldPos);

    float3 lighting = clamp(dot(normalize(input.normal), lightValues.dir), 0.0, 1.0) * lightValues.L;
    
    float4 fragColor = float4(lighting.r, lighting.g, lighting.b, 1.0);
	return fragColor;
}
